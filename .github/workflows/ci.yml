name: ci

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  APP_NAME: aura
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.goversion.outputs.go }}
      version: ${{ steps.meta.outputs.version }}
      sha: ${{ github.sha }}
      services: ${{ steps.svcs.outputs.list }}
    steps:
      - uses: actions/checkout@v5
      - id: goversion
        run: |
          if [[ -f go.work ]]; then
            GO=$(grep '^go ' go.work | awk '{print $2}')
          else
            GO=$(grep '^go ' services/app/go.mod | awk '{print $2}')
          fi
          echo "go=$GO" >> $GITHUB_OUTPUT

      - id: meta
        run: |
          echo "version=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - id: svcs
        run: |
          set -euo pipefail
          # Find all services/* directories, turn into JSON array
          SVC_LIST=$(ls -d services/* 2>/dev/null | xargs -n1 basename | jq -R -s -c 'split("\n")[:-1]')
          echo "list=$SVC_LIST" >> $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ needs.setup.outputs.go }}
          cache: true
      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
      - name: Lint
        run: make lint

  test:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        service: ${{ fromJSON(needs.setup.outputs.services) }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ needs.setup.outputs.go }}
          cache: true
      - name: Run tests with coverage
        run: make cover COVER_MIN=0
      - name: Upload coverage
        uses: actions/upload-artifact@v5
        with:
          name: coverage-${{ matrix.service }}
          path: .build/

  docker-images:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: needs.setup.outputs.services != ''
    strategy:
      matrix:
        service: ${{ fromJSON(needs.setup.outputs.services) }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
      - name: Pull build cache
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.APP_NAME }}-${{ matrix.service }}:buildcache || true
      - name: Build & push Docker image
        run: make docker-build-one SERVICE=${{ matrix.service }} LOCAL=false PUSH=true VERSION=${{ needs.setup.outputs.version }} COMMIT_HASH=${{ needs.setup.outputs.sha }}

  scan-images:
    runs-on: ubuntu-latest
    needs: [setup, docker-images]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        service: ${{ fromJSON(needs.setup.outputs.services) }}
    steps:
      - uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.APP_NAME }}-${{ matrix.service }}:${{ needs.setup.outputs.version }}-${{ needs.setup.outputs.sha }}
          ignore-unfixed: true
          format: table
          severity: CRITICAL,HIGH

  # helm-deploy:
  #   runs-on: ubuntu-latest
  #   needs: [docker-images, scan-images]
  #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #     - uses: actions/checkout@v5
  #     - uses: azure/setup-helm@v4
  #       with:
  #         version: v3.14.4
  #     - name: Helm repo setup
  #       run: |
  #         helm repo add highonsemicolon https://highonsemicolon.github.io/pathfinder
  #         helm repo update
  #     - name: Deploy via Makefile
  #       run: |
  #         make helm-deploy IMAGE_TAG=${{ needs.setup.outputs.version }}-${{ needs.setup.outputs.sha }}
