name: CI

on:
  pull_request:
  push:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.goversion.outputs.go-version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Read Go version
        id: goversion
        run: |
          if [ -f go.work ]; then
            GO_VERSION=$(grep '^go ' go.work | awk '{print $2}')
          else
            GO_VERSION=$(grep '^go ' cmd/go.mod | awk '{print $2}')
          fi
          echo "go-version=$GO_VERSION" >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.goversion.outputs.go-version }}

  lint-deps-and-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Lint, verify deps, and run tests for all modules
        run: |
          if [ -f go.work ]; then
            MODULES=$(grep -E '^\s+\./' go.work | awk '{print $1}')
          else
            MODULES="./cmd"
          fi

          for mod in $MODULES; do
            echo "=== Processing $mod ==="
            cd $mod

            # Verify dependencies
            go mod tidy
            git diff --exit-code go.mod go.sum || exit 1

            # Run tests
            make test

            cd -
          done

      - name: Format check
        run: |
          make fmt
          git diff --exit-code

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Build server
        run: make build
      - name: Build client
        run: make client

  proto-check:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Check protobuf is up to date
        run: |
          make proto
          git diff --exit-code gen/

  docker:
    runs-on: ubuntu-latest
    needs: [lint-deps-and-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}

      - name: Build and push Docker images per service
        run: |
          if [ -f go.work ]; then
            MODULES=$(grep 'use ' go.work | awk '{print $2}')
          else
            MODULES="./cmd"
          fi

          for mod in $MODULES; do
            if [ -f "$mod/main.go" ]; then
              SERVICE_NAME=$(basename $mod)
              echo "Building Docker image for $SERVICE_NAME"

              # Build the binary
              BIN_DIR=$(mktemp -d)
              go build -o $BIN_DIR/$SERVICE_NAME $mod

              # Build Docker image using the template
              docker build \
                --build-arg SERVICE_BINARY=$SERVICE_NAME \
                -t aura/${SERVICE_NAME}:${GITHUB_SHA} \
                -f Dockerfile .
            fi
          done
