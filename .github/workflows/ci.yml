name: ci

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:

permissions:
  contents: read
  packages: write   # needed for GHCR
  id-token: write   # for OIDC (optional)

env:
  APP_NAME: aura
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.goversion.outputs.go }}
      version: ${{ steps.meta.outputs.version }}
      sha: ${{ github.sha }}
      services: ${{ steps.svcs.outputs.list }}
    steps:
      - uses: actions/checkout@v5
      - id: goversion
        shell: bash
        run: |
          if [[ -f go.work ]]; then
            GO=$(grep '^go ' go.work | awk '{print $2}')
          else
            GO=$(grep '^go ' services/app/go.mod | awk '{print $2}')
          fi
          echo "go=$GO" >> $GITHUB_OUTPUT
      - id: meta
        run: |
          DESCRIBE=$(git describe --tags --always --dirty 2>/dev/null || echo 0.1.0)
          echo "version=$DESCRIBE" >> $GITHUB_OUTPUT

      - id: svcs
        run: |
          set -euo pipefail
          # Find all services/* directories, turn into JSON array
          SVC_LIST=$(ls -d services/* 2>/dev/null | xargs -n1 basename | jq -R -s -c 'split("\n")[:-1]')
          echo "list=$SVC_LIST" >> $GITHUB_OUTPUT

  lint-test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ needs.setup.outputs.go }}
          cache: true
      - name: Cache go-build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
      - name: Lint
        run: make lint
      - name: Run tests with coverage
        run: make cover COVER_MIN=0
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            .build/coverage.out
            .build/coverage.html
            .build/coverage.txt

  docker-images:
    runs-on: ubuntu-latest
    needs: [setup, lint-test]
    strategy:
      matrix:
        service: ${{ fromJSON(needs.setup.outputs.services) }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ needs.setup.outputs.go }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: make docker-build-one SERVICE=${{ matrix.service }}
        env:
          VERSION: ${{ needs.setup.outputs.version }}
          COMMIT: ${{ needs.setup.outputs.sha }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_OWNER: ${{ env.IMAGE_OWNER }}
          APP_NAME: ${{ env.APP_NAME }}

      - name: Push image
        if: github.event_name != 'pull_request'
        run: make docker-push-one SERVICE=${{ matrix.service }}
        env:
          VERSION: ${{ needs.setup.outputs.version }}
          COMMIT: ${{ needs.setup.outputs.sha }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_OWNER: ${{ env.IMAGE_OWNER }}
          APP_NAME: ${{ env.APP_NAME }}
          BRANCH: ${{ github.ref_name }}

  scan-images:
    runs-on: ubuntu-latest
    needs: docker-images
    # if: github.event_name != 'pull_request' # reduce PR noise; toggle as desired
    steps:
      - uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: repo
          ignore-unfixed: true
          format: table
          severity: CRITICAL,HIGH

  helm-deploy:
    runs-on: ubuntu-latest
    needs: docker-images
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v5
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4
      - name: Helm repo setup
        run: |
          helm repo add highonsemicolon https://highonsemicolon.github.io/charts
          helm repo update
      - name: Deploy/upgrade
        env:
          VERSION: ${{ needs.setup.outputs.version }}
          COMMIT: ${{ needs.setup.outputs.sha }}
        run: |
          # Example values; wire in your kubecontext via env or action
          CHART=highonsemicolon/pathfinder
          RELEASE=${{ env.APP_NAME }}
          helm upgrade --install "$RELEASE" "$CHART" \
            --set image.tag=${VERSION}-${COMMIT} \
            -f helm/values.yaml
