// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CheckPermissionRequest defines model for CheckPermissionRequest.
type CheckPermissionRequest struct {
	Object     string `json:"object"`
	Permission string `json:"permission"`
	Subject    string `json:"subject"`
}

// CheckPermissionResponse defines model for CheckPermissionResponse.
type CheckPermissionResponse struct {
	Allowed *bool `json:"allowed,omitempty"`
}

// ExpandRelationshipsResponse defines model for ExpandRelationshipsResponse.
type ExpandRelationshipsResponse struct {
	Object        *string `json:"object,omitempty"`
	Relationships *[]struct {
		Relation *string `json:"relation,omitempty"`
		Subject  *string `json:"subject,omitempty"`
	} `json:"relationships,omitempty"`
}

// LookupResourcesResponse defines model for LookupResourcesResponse.
type LookupResourcesResponse struct {
	Resources *[]string `json:"resources,omitempty"`
}

// RelationshipRequest defines model for RelationshipRequest.
type RelationshipRequest struct {
	Object   string `json:"object"`
	Relation string `json:"relation"`
	Subject  string `json:"subject"`
}

// ExpandRelationshipsParams defines parameters for ExpandRelationships.
type ExpandRelationshipsParams struct {
	Object string `form:"object" json:"object"`
}

// LookupResourcesParams defines parameters for LookupResources.
type LookupResourcesParams struct {
	User       string `form:"user" json:"user"`
	Permission string `form:"permission" json:"permission"`
}

// CheckPermissionJSONRequestBody defines body for CheckPermission for application/json ContentType.
type CheckPermissionJSONRequestBody = CheckPermissionRequest

// DeleteRelationshipJSONRequestBody defines body for DeleteRelationship for application/json ContentType.
type DeleteRelationshipJSONRequestBody = RelationshipRequest

// CreateRelationshipJSONRequestBody defines body for CreateRelationship for application/json ContentType.
type CreateRelationshipJSONRequestBody = RelationshipRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check if a user has permission for an object
	// (POST /permissions/check)
	CheckPermission(c *gin.Context)
	// Delete an existing relationship tuple
	// (DELETE /relationships)
	DeleteRelationship(c *gin.Context)
	// Create a new relationship tuple
	// (POST /relationships)
	CreateRelationship(c *gin.Context)
	// Expand all relationships for a given object
	// (GET /relationships/expand)
	ExpandRelationships(c *gin.Context, params ExpandRelationshipsParams)
	// Find all resources accessible by a user
	// (GET /resources/lookup)
	LookupResources(c *gin.Context, params LookupResourcesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CheckPermission operation middleware
func (siw *ServerInterfaceWrapper) CheckPermission(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckPermission(c)
}

// DeleteRelationship operation middleware
func (siw *ServerInterfaceWrapper) DeleteRelationship(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRelationship(c)
}

// CreateRelationship operation middleware
func (siw *ServerInterfaceWrapper) CreateRelationship(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRelationship(c)
}

// ExpandRelationships operation middleware
func (siw *ServerInterfaceWrapper) ExpandRelationships(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExpandRelationshipsParams

	// ------------- Required query parameter "object" -------------

	if paramValue := c.Query("object"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("query argument object is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "object", c.Request.URL.Query(), &params.Object)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter object: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExpandRelationships(c, params)
}

// LookupResources operation middleware
func (siw *ServerInterfaceWrapper) LookupResources(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupResourcesParams

	// ------------- Required query parameter "user" -------------

	if paramValue := c.Query("user"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("query argument user is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user", c.Request.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter user: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "permission" -------------

	if paramValue := c.Query("permission"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("query argument permission is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "permission", c.Request.URL.Query(), &params.Permission)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter permission: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LookupResources(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/permissions/check", wrapper.CheckPermission)
	router.DELETE(options.BaseURL+"/relationships", wrapper.DeleteRelationship)
	router.POST(options.BaseURL+"/relationships", wrapper.CreateRelationship)
	router.GET(options.BaseURL+"/relationships/expand", wrapper.ExpandRelationships)
	router.GET(options.BaseURL+"/resources/lookup", wrapper.LookupResources)
}

type CheckPermissionRequestObject struct {
	Body *CheckPermissionJSONRequestBody
}

type CheckPermissionResponseObject interface {
	VisitCheckPermissionResponse(w http.ResponseWriter) error
}

type CheckPermission200JSONResponse CheckPermissionResponse

func (response CheckPermission200JSONResponse) VisitCheckPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRelationshipRequestObject struct {
	Body *DeleteRelationshipJSONRequestBody
}

type DeleteRelationshipResponseObject interface {
	VisitDeleteRelationshipResponse(w http.ResponseWriter) error
}

type DeleteRelationship200Response struct {
}

func (response DeleteRelationship200Response) VisitDeleteRelationshipResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRelationship400Response struct {
}

func (response DeleteRelationship400Response) VisitDeleteRelationshipResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateRelationshipRequestObject struct {
	Body *CreateRelationshipJSONRequestBody
}

type CreateRelationshipResponseObject interface {
	VisitCreateRelationshipResponse(w http.ResponseWriter) error
}

type CreateRelationship201Response struct {
}

func (response CreateRelationship201Response) VisitCreateRelationshipResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateRelationship400Response struct {
}

func (response CreateRelationship400Response) VisitCreateRelationshipResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExpandRelationshipsRequestObject struct {
	Params ExpandRelationshipsParams
}

type ExpandRelationshipsResponseObject interface {
	VisitExpandRelationshipsResponse(w http.ResponseWriter) error
}

type ExpandRelationships200JSONResponse ExpandRelationshipsResponse

func (response ExpandRelationships200JSONResponse) VisitExpandRelationshipsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LookupResourcesRequestObject struct {
	Params LookupResourcesParams
}

type LookupResourcesResponseObject interface {
	VisitLookupResourcesResponse(w http.ResponseWriter) error
}

type LookupResources200JSONResponse LookupResourcesResponse

func (response LookupResources200JSONResponse) VisitLookupResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Check if a user has permission for an object
	// (POST /permissions/check)
	CheckPermission(ctx context.Context, request CheckPermissionRequestObject) (CheckPermissionResponseObject, error)
	// Delete an existing relationship tuple
	// (DELETE /relationships)
	DeleteRelationship(ctx context.Context, request DeleteRelationshipRequestObject) (DeleteRelationshipResponseObject, error)
	// Create a new relationship tuple
	// (POST /relationships)
	CreateRelationship(ctx context.Context, request CreateRelationshipRequestObject) (CreateRelationshipResponseObject, error)
	// Expand all relationships for a given object
	// (GET /relationships/expand)
	ExpandRelationships(ctx context.Context, request ExpandRelationshipsRequestObject) (ExpandRelationshipsResponseObject, error)
	// Find all resources accessible by a user
	// (GET /resources/lookup)
	LookupResources(ctx context.Context, request LookupResourcesRequestObject) (LookupResourcesResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CheckPermission operation middleware
func (sh *strictHandler) CheckPermission(ctx *gin.Context) {
	var request CheckPermissionRequestObject

	var body CheckPermissionJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckPermission(ctx, request.(CheckPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckPermissionResponseObject); ok {
		if err := validResponse.VisitCheckPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRelationship operation middleware
func (sh *strictHandler) DeleteRelationship(ctx *gin.Context) {
	var request DeleteRelationshipRequestObject

	var body DeleteRelationshipJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRelationship(ctx, request.(DeleteRelationshipRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRelationship")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRelationshipResponseObject); ok {
		if err := validResponse.VisitDeleteRelationshipResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRelationship operation middleware
func (sh *strictHandler) CreateRelationship(ctx *gin.Context) {
	var request CreateRelationshipRequestObject

	var body CreateRelationshipJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRelationship(ctx, request.(CreateRelationshipRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRelationship")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateRelationshipResponseObject); ok {
		if err := validResponse.VisitCreateRelationshipResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExpandRelationships operation middleware
func (sh *strictHandler) ExpandRelationships(ctx *gin.Context, params ExpandRelationshipsParams) {
	var request ExpandRelationshipsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExpandRelationships(ctx, request.(ExpandRelationshipsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExpandRelationships")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExpandRelationshipsResponseObject); ok {
		if err := validResponse.VisitExpandRelationshipsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// LookupResources operation middleware
func (sh *strictHandler) LookupResources(ctx *gin.Context, params LookupResourcesParams) {
	var request LookupResourcesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LookupResources(ctx, request.(LookupResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LookupResources")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LookupResourcesResponseObject); ok {
		if err := validResponse.VisitLookupResourcesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWz2/bNhT+Vwhuhw1QLbvtdtDN6VYgQw9FOmDAAh8o6tliQ5HMI+nEKfS/D6RkWbLk",
	"NDpk282m+H5933sf3zfKdWW0AuUszb5Ry0uoWPz5oQR+9xmwEtYKrW7g3oN14YtBbQCdgHhP51+Bx3N4",
	"ZJWRQDNaaJ6t3r6jCXUHEw6sQ6F2tE6o6TwOTRBYMXXf+gn/3gJmTAoOY5M6oQj3XiAUNLvt7JNjooMU",
	"Np15+7VOxoVbo5WFceVMSv0QovRSc+ih85lrLYGpmNMozO+PhqniBiRzQitbCmMvh5oJMva9BivhoLJj",
	"t8d7Q8d7AQ+ALyZjh9qbzAGrVpNsjCpvDxgiO0zf+KT1nTc3YLVHDs/ggscrg5Rue9iEX+9/+TUw3YEw",
	"quv7GfV5mjUKz6KTXGCggiqfwUAch1znM4ahi9vNxXgUQjjgHoU7fAm60BR5BQwB196V4V8e/33UWDFH",
	"M/rHX3/SpFGROADx6ymt0jlD6+BYqK0O9gVYjsI0ENA1KcWufGMAt8Gj4kCYd6VG8RSzJRZwLziQnFko",
	"iFbkBq7WH8hPfzP1JHKGb6S4A1LpAuTPixBXuIjQeuDlS+tl/fmaJnQP2MgRXS2Wi2VAWRtQzAia0XeL",
	"1WIZNIO5MpafntTDpjxIRewD3fRD6IYY47qg2bmS0IYMsO5KF4dwnWvlQEVLZowUPNqmX23TEI0ah18/",
	"ImxpRn9IT3KdtlqdXhDqekh+EKZ40IxSrOXtcvl6WbQjG9MYsny6RSKABMF6OWw4mt0OW+12U29C+1cV",
	"w8MRWyK2hJHQ/qRklpyoIVuNhCnSa+V0JIoFSHAwpu23eN6f+FdibkpUXk7bENS+L9JUVhDrOQdrt17K",
	"Q+jr91OW12rPpCiIUMY7UjDH5jHRwBXQhkdhnVA70oeaOB9UKjz900OCwP7faK++gzaPFfxLaDdwEUYU",
	"PEziPGr1FOKmEVLZwQQBE4tIFDxkFThAG1MSIfd7D3igCVWs6r0T5wAmPT7On6PNKyrQcwvVhAp9EtYR",
	"vSVDWZjFRRORMCmHXhr1ITuxh3MJateVVMYN5yInZwvQy/gIOjiLjWTajzl/sf57bi8thM/wyuIwilwC",
	"OW2Js+j9KDpyW/u+0/zQPj1NEmEzOZJz9tyhLjzv1pfIkUfZrkM2S9Ow4zwt2n1uwXWVMiPS/YrWm/qf",
	"AAAA//9GRzM0og0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
