// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CheckPermissionRequest defines model for CheckPermissionRequest.
type CheckPermissionRequest struct {
	Object     string `json:"object"`
	Permission string `json:"permission"`
	Subject    string `json:"subject"`
}

// CheckPermissionResponse defines model for CheckPermissionResponse.
type CheckPermissionResponse struct {
	Allowed *bool `json:"allowed,omitempty"`
}

// ExpandRelationshipsResponse defines model for ExpandRelationshipsResponse.
type ExpandRelationshipsResponse struct {
	Object        *string `json:"object,omitempty"`
	Relationships *[]struct {
		Relation *string `json:"relation,omitempty"`
		Subject  *string `json:"subject,omitempty"`
	} `json:"relationships,omitempty"`
}

// LookupResourcesResponse defines model for LookupResourcesResponse.
type LookupResourcesResponse struct {
	Resources *[]string `json:"resources,omitempty"`
}

// ObjectRequest defines model for ObjectRequest.
type ObjectRequest struct {
	Object string `json:"object"`
}

// RelationshipRequest defines model for RelationshipRequest.
type RelationshipRequest struct {
	Object   string `json:"object"`
	Relation string `json:"relation"`
	Subject  string `json:"subject"`
}

// CreateObjectParams defines parameters for CreateObject.
type CreateObjectParams struct {
	// XUserId User ID of the object creator
	XUserId string `json:"X-User-Id"`
}

// ExpandRelationshipsParams defines parameters for ExpandRelationships.
type ExpandRelationshipsParams struct {
	Object string `form:"object" json:"object"`
}

// LookupResourcesParams defines parameters for LookupResources.
type LookupResourcesParams struct {
	User       string `form:"user" json:"user"`
	Permission string `form:"permission" json:"permission"`
}

// CreateObjectJSONRequestBody defines body for CreateObject for application/json ContentType.
type CreateObjectJSONRequestBody = ObjectRequest

// CheckPermissionJSONRequestBody defines body for CheckPermission for application/json ContentType.
type CheckPermissionJSONRequestBody = CheckPermissionRequest

// CreateRelationshipJSONRequestBody defines body for CreateRelationship for application/json ContentType.
type CreateRelationshipJSONRequestBody = RelationshipRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete an existing object
	// (DELETE /objects)
	DeleteObject(c *gin.Context)
	// Create a new object
	// (POST /objects)
	CreateObject(c *gin.Context, params CreateObjectParams)
	// Check if a user has permission for an object
	// (POST /permissions/check)
	CheckPermission(c *gin.Context)
	// Delete an existing relationship tuple
	// (DELETE /relationships)
	DeleteRelationship(c *gin.Context)
	// Create a new relationship tuple
	// (POST /relationships)
	CreateRelationship(c *gin.Context)
	// Expand all relationships for a given object
	// (GET /relationships/expand)
	ExpandRelationships(c *gin.Context, params ExpandRelationshipsParams)
	// Find all resources accessible by a user
	// (GET /resources/lookup)
	LookupResources(c *gin.Context, params LookupResourcesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteObject operation middleware
func (siw *ServerInterfaceWrapper) DeleteObject(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteObject(c)
}

// CreateObject operation middleware
func (siw *ServerInterfaceWrapper) CreateObject(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateObjectParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-User-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-User-Id")]; found {
		var XUserId string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("expected one value for X-User-Id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-User-Id", runtime.ParamLocationHeader, valueList[0], &XUserId)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter X-User-Id: %w", err), http.StatusBadRequest)
			return
		}

		params.XUserId = XUserId

	} else {
		siw.ErrorHandler(c, fmt.Errorf("header parameter X-User-Id is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateObject(c, params)
}

// CheckPermission operation middleware
func (siw *ServerInterfaceWrapper) CheckPermission(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckPermission(c)
}

// DeleteRelationship operation middleware
func (siw *ServerInterfaceWrapper) DeleteRelationship(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRelationship(c)
}

// CreateRelationship operation middleware
func (siw *ServerInterfaceWrapper) CreateRelationship(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRelationship(c)
}

// ExpandRelationships operation middleware
func (siw *ServerInterfaceWrapper) ExpandRelationships(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExpandRelationshipsParams

	// ------------- Required query parameter "object" -------------

	if paramValue := c.Query("object"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("query argument object is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "object", c.Request.URL.Query(), &params.Object)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter object: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExpandRelationships(c, params)
}

// LookupResources operation middleware
func (siw *ServerInterfaceWrapper) LookupResources(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupResourcesParams

	// ------------- Required query parameter "user" -------------

	if paramValue := c.Query("user"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("query argument user is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user", c.Request.URL.Query(), &params.User)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter user: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "permission" -------------

	if paramValue := c.Query("permission"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("query argument permission is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "permission", c.Request.URL.Query(), &params.Permission)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter permission: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LookupResources(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/objects", wrapper.DeleteObject)
	router.POST(options.BaseURL+"/objects", wrapper.CreateObject)
	router.POST(options.BaseURL+"/permissions/check", wrapper.CheckPermission)
	router.DELETE(options.BaseURL+"/relationships", wrapper.DeleteRelationship)
	router.POST(options.BaseURL+"/relationships", wrapper.CreateRelationship)
	router.GET(options.BaseURL+"/relationships/expand", wrapper.ExpandRelationships)
	router.GET(options.BaseURL+"/resources/lookup", wrapper.LookupResources)
}

type DeleteObjectRequestObject struct {
}

type DeleteObjectResponseObject interface {
	VisitDeleteObjectResponse(w http.ResponseWriter) error
}

type DeleteObject200Response struct {
}

func (response DeleteObject200Response) VisitDeleteObjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteObject400Response struct {
}

func (response DeleteObject400Response) VisitDeleteObjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateObjectRequestObject struct {
	Params CreateObjectParams
	Body   *CreateObjectJSONRequestBody
}

type CreateObjectResponseObject interface {
	VisitCreateObjectResponse(w http.ResponseWriter) error
}

type CreateObject201Response struct {
}

func (response CreateObject201Response) VisitCreateObjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateObject400Response struct {
}

func (response CreateObject400Response) VisitCreateObjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CheckPermissionRequestObject struct {
	Body *CheckPermissionJSONRequestBody
}

type CheckPermissionResponseObject interface {
	VisitCheckPermissionResponse(w http.ResponseWriter) error
}

type CheckPermission200JSONResponse CheckPermissionResponse

func (response CheckPermission200JSONResponse) VisitCheckPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRelationshipRequestObject struct {
}

type DeleteRelationshipResponseObject interface {
	VisitDeleteRelationshipResponse(w http.ResponseWriter) error
}

type DeleteRelationship200Response struct {
}

func (response DeleteRelationship200Response) VisitDeleteRelationshipResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRelationship400Response struct {
}

func (response DeleteRelationship400Response) VisitDeleteRelationshipResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateRelationshipRequestObject struct {
	Body *CreateRelationshipJSONRequestBody
}

type CreateRelationshipResponseObject interface {
	VisitCreateRelationshipResponse(w http.ResponseWriter) error
}

type CreateRelationship201Response struct {
}

func (response CreateRelationship201Response) VisitCreateRelationshipResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateRelationship400Response struct {
}

func (response CreateRelationship400Response) VisitCreateRelationshipResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExpandRelationshipsRequestObject struct {
	Params ExpandRelationshipsParams
}

type ExpandRelationshipsResponseObject interface {
	VisitExpandRelationshipsResponse(w http.ResponseWriter) error
}

type ExpandRelationships200JSONResponse ExpandRelationshipsResponse

func (response ExpandRelationships200JSONResponse) VisitExpandRelationshipsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LookupResourcesRequestObject struct {
	Params LookupResourcesParams
}

type LookupResourcesResponseObject interface {
	VisitLookupResourcesResponse(w http.ResponseWriter) error
}

type LookupResources200JSONResponse LookupResourcesResponse

func (response LookupResources200JSONResponse) VisitLookupResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete an existing object
	// (DELETE /objects)
	DeleteObject(ctx context.Context, request DeleteObjectRequestObject) (DeleteObjectResponseObject, error)
	// Create a new object
	// (POST /objects)
	CreateObject(ctx context.Context, request CreateObjectRequestObject) (CreateObjectResponseObject, error)
	// Check if a user has permission for an object
	// (POST /permissions/check)
	CheckPermission(ctx context.Context, request CheckPermissionRequestObject) (CheckPermissionResponseObject, error)
	// Delete an existing relationship tuple
	// (DELETE /relationships)
	DeleteRelationship(ctx context.Context, request DeleteRelationshipRequestObject) (DeleteRelationshipResponseObject, error)
	// Create a new relationship tuple
	// (POST /relationships)
	CreateRelationship(ctx context.Context, request CreateRelationshipRequestObject) (CreateRelationshipResponseObject, error)
	// Expand all relationships for a given object
	// (GET /relationships/expand)
	ExpandRelationships(ctx context.Context, request ExpandRelationshipsRequestObject) (ExpandRelationshipsResponseObject, error)
	// Find all resources accessible by a user
	// (GET /resources/lookup)
	LookupResources(ctx context.Context, request LookupResourcesRequestObject) (LookupResourcesResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteObject operation middleware
func (sh *strictHandler) DeleteObject(ctx *gin.Context) {
	var request DeleteObjectRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteObject(ctx, request.(DeleteObjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteObject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteObjectResponseObject); ok {
		if err := validResponse.VisitDeleteObjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateObject operation middleware
func (sh *strictHandler) CreateObject(ctx *gin.Context, params CreateObjectParams) {
	var request CreateObjectRequestObject

	request.Params = params

	var body CreateObjectJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateObject(ctx, request.(CreateObjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateObject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateObjectResponseObject); ok {
		if err := validResponse.VisitCreateObjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckPermission operation middleware
func (sh *strictHandler) CheckPermission(ctx *gin.Context) {
	var request CheckPermissionRequestObject

	var body CheckPermissionJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckPermission(ctx, request.(CheckPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckPermissionResponseObject); ok {
		if err := validResponse.VisitCheckPermissionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRelationship operation middleware
func (sh *strictHandler) DeleteRelationship(ctx *gin.Context) {
	var request DeleteRelationshipRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRelationship(ctx, request.(DeleteRelationshipRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRelationship")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRelationshipResponseObject); ok {
		if err := validResponse.VisitDeleteRelationshipResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRelationship operation middleware
func (sh *strictHandler) CreateRelationship(ctx *gin.Context) {
	var request CreateRelationshipRequestObject

	var body CreateRelationshipJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRelationship(ctx, request.(CreateRelationshipRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRelationship")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateRelationshipResponseObject); ok {
		if err := validResponse.VisitCreateRelationshipResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExpandRelationships operation middleware
func (sh *strictHandler) ExpandRelationships(ctx *gin.Context, params ExpandRelationshipsParams) {
	var request ExpandRelationshipsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExpandRelationships(ctx, request.(ExpandRelationshipsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExpandRelationships")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExpandRelationshipsResponseObject); ok {
		if err := validResponse.VisitExpandRelationshipsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// LookupResources operation middleware
func (sh *strictHandler) LookupResources(ctx *gin.Context, params LookupResourcesParams) {
	var request LookupResourcesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LookupResources(ctx, request.(LookupResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LookupResources")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LookupResourcesResponseObject); ok {
		if err := validResponse.VisitLookupResourcesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXX2/bNhD/KgS3hw1QIrvthkJvTrICHgqkSDdsWOCHk3S22FAkQ1JO3ELffSCpWFIk",
	"u9GQLG+2dP9/d787faOZLJUUKKyhyTdqsgJL8D/PC8xuPqEumTFMiiu8rdBY90ZpqVBbhl5Opl8w88/x",
	"HkrFkSY0l1kyf/OWRtTulHtgrGZiQ+uIqr3FvopGyMfkTTVivzKoE+Asw6FKHVGNtxXTmNPkeq8fPQTa",
	"C2G1V2/e1tEwcaOkMDjMHDiXd85LJzSrK9zbTKXkCMLHNHDz270CkV8hB8ukMAVT5rCriUXWXatOi1ks",
	"zdDsg1zf8JbhHeong7HRslKJRSjno2gMMm8egNawG5f4KOVNpa7QyEpneKQu+kGkF9J1pzbu17tffnVI",
	"74swyOv7EV36X88zBI86tNEda8Vud0zyfRST6ADuJZbpBNz9EKYynTCCe7/R4aydO8wqzezus2OjkOQZ",
	"gka9qGzh/qX+3wepS7A0ob//9QeNAnf5sfNv27AKaxWtnWEm1tLp52gyzVQoAV2Qgm2KE4V67SyKDAlU",
	"tpCaffXREoN6yzIkKRjMiRTkCs8W5+Snf0B8ZSnoE85ukJQyR/7zqfPLrK/Qomflc2Nl8WlJI7pFHUiQ",
	"zk9npzNXZalQgGI0oW/9o4gqsIVPPw7VMSF4jtbPgusCb3uZ04Re+OeXba3D0HidN7PZMO8gSoK9nJgq",
	"y9CYdcX5zoXzbkxnKbbAWU6YUJUlOVjoIUaT6z5W16t65fqnLEHv9kESEATvmbFMbMiely1sjOuXyybX",
	"lVsXMrR8P9VzjdBJVYGGEi1q4/33I/7ToCbLCyLXxBbYeCOZsyBdkzAnVCDkvmUE+Bb6+8SpnSxz2m3l",
	"QO5hR47wiMtUhyk9k/nOSWRSWBQ+A1CKs8znEH8xYfZaUz9qXNOE/hC3+zhulnHc5566P14upnqA9vwg",
	"2j7x/wvtgBMBIvDuGM51RON2K5s4cyvYM904/P0NTV+m7AcOoCfVf/ZyUTSr0IfRR6uVIr6ARKOpuJ0I",
	"mddkawLEETwpwJAWGrKW2g1vh6zjwbFxnKC6O+1JNNVVeHWy6iZLbOU2YdvQvWPuu/Q1KMTzt/DY/fBf",
	"+aMHw+uxyCQABu0Zo7+6XYwbHEFm5Cgf7he/MW4r1Lt2Ych27U7aFi/EGsc+LkaY4yMz1i3I/ihPAil4",
	"JMB530pgDLJhW3xMG83pHnN/7R/E5NHHwNPwcNw1CY1o3I56vGVeH9tDH0dHcAU/pSzlSNovpknwfmB7",
	"cBv9rtF016yLEIS7l8ePsQvcIpeqRGFJkKIRrTRvrvQkjrnMgBfS2OT97P0sBsXi7ZzWq/rfAAAA//9Y",
	"rKb6qxAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
